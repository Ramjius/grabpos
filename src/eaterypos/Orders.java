package eaterypos;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import org.eclipse.jdt.internal.compiler.batch.Main;

/**
 *
 * @author Ramjius Muhsin
 */
public class Orders extends javax.swing.JFrame {

    /**
     * Creates new form Orders
     */
    public Orders() {
        initComponents();
        ShowItems();
    }
    
    ResultSet Rs = null;
    Connection Con = null;
    Statement St = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrdersTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        SearchOrder = new javax.swing.JTextField();
        SearchBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrderDetails = new javax.swing.JTable();
        Sale = new javax.swing.JButton();
        ItemsBtn = new javax.swing.JButton();
        Orders = new javax.swing.JButton();
        Logout = new javax.swing.JButton();
        Logo = new javax.swing.JLabel();
        OrdersItemsBtn = new javax.swing.JButton();
        PrintBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        sdate = new com.toedter.calendar.JDateChooser();
        edate = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SearchOrders = new javax.swing.JButton();
        ResetOrders = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        SourceFilterComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        PaymentModeFilter = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        ResetOrders1 = new javax.swing.JButton();
        ReportsBtn = new javax.swing.JButton();
        ReportsBtn1 = new javax.swing.JButton();
        PrintOrders = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        OrdersTable.setBackground(new java.awt.Color(5, 76, 74));
        OrdersTable.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        OrdersTable.setForeground(new java.awt.Color(247, 153, 95));
        OrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        OrdersTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        OrdersTable.setRowHeight(30);
        OrdersTable.setShowGrid(true);
        OrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OrdersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(OrdersTable);

        jLabel2.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(12, 18, 35));
        jLabel2.setText("SEARCH ORDER");

        SearchOrder.setBackground(new java.awt.Color(207, 217, 214));
        SearchOrder.setForeground(new java.awt.Color(12, 18, 35));
        SearchOrder.setText("Enter Order No.");
        SearchOrder.setToolTipText("");
        SearchOrder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(247, 153, 95)));
        SearchOrder.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SearchOrderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                SearchOrderFocusLost(evt);
            }
        });
        SearchOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchOrderActionPerformed(evt);
            }
        });

        SearchBtn.setBackground(new java.awt.Color(249, 188, 44));
        SearchBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        SearchBtn.setForeground(new java.awt.Color(12, 18, 35));
        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(12, 18, 35));
        jLabel3.setText("ORDER DETAILS");

        OrderDetails.setBackground(new java.awt.Color(5, 76, 74));
        OrderDetails.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        OrderDetails.setForeground(new java.awt.Color(247, 153, 95));
        OrderDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Price", "Quantity", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        OrderDetails.setRowHeight(30);
        OrderDetails.setShowGrid(true);
        jScrollPane2.setViewportView(OrderDetails);

        Sale.setBackground(new java.awt.Color(249, 188, 44));
        Sale.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        Sale.setForeground(new java.awt.Color(12, 18, 35));
        Sale.setText("SALE");
        Sale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaleActionPerformed(evt);
            }
        });

        ItemsBtn.setBackground(new java.awt.Color(249, 188, 44));
        ItemsBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        ItemsBtn.setForeground(new java.awt.Color(12, 18, 35));
        ItemsBtn.setText("ITEMS");
        ItemsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemsBtnActionPerformed(evt);
            }
        });

        Orders.setBackground(new java.awt.Color(249, 188, 44));
        Orders.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        Orders.setForeground(new java.awt.Color(12, 18, 35));
        Orders.setText("ORDERS");
        Orders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdersActionPerformed(evt);
            }
        });

        Logout.setBackground(new java.awt.Color(255, 0, 51));
        Logout.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        Logout.setForeground(new java.awt.Color(12, 18, 35));
        Logout.setText("LOGOUT");
        Logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogoutMouseClicked(evt);
            }
        });
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/80x80.png"))); // NOI18N

        OrdersItemsBtn.setBackground(new java.awt.Color(249, 188, 44));
        OrdersItemsBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        OrdersItemsBtn.setForeground(new java.awt.Color(12, 18, 35));
        OrdersItemsBtn.setText("ORDER ITEMS");
        OrdersItemsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdersItemsBtnActionPerformed(evt);
            }
        });

        PrintBtn.setBackground(new java.awt.Color(249, 188, 44));
        PrintBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        PrintBtn.setForeground(new java.awt.Color(12, 18, 35));
        PrintBtn.setText("PRINT ORDER");
        PrintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintBtnActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(5, 76, 74));

        sdate.setBackground(new java.awt.Color(255, 255, 255));
        sdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));
        sdate.setForeground(new java.awt.Color(0, 0, 0));

        edate.setBackground(new java.awt.Color(255, 255, 255));
        edate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));
        edate.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(249, 188, 44));
        jLabel4.setText("FROM: ");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(249, 188, 44));
        jLabel5.setText("TO: ");

        SearchOrders.setBackground(new java.awt.Color(249, 188, 44));
        SearchOrders.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        SearchOrders.setForeground(new java.awt.Color(12, 18, 35));
        SearchOrders.setText("SEARCH");
        SearchOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchOrdersActionPerformed(evt);
            }
        });

        ResetOrders.setBackground(new java.awt.Color(5, 76, 74));
        ResetOrders.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        ResetOrders.setForeground(new java.awt.Color(255, 255, 255));
        ResetOrders.setText("RESET");
        ResetOrders.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));
        ResetOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetOrdersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sdate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(edate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SearchOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ResetOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(edate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SearchOrders)
                        .addComponent(ResetOrders)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(5, 76, 74));

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ORDERS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(23, 23, 23))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(5, 76, 74));

        SourceFilterComboBox.setBackground(new java.awt.Color(5, 76, 74));
        SourceFilterComboBox.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        SourceFilterComboBox.setForeground(new java.awt.Color(249, 188, 44));
        SourceFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bolt", "Glovo", "In-House" }));
        SourceFilterComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SourceFilterComboBoxItemStateChanged(evt);
            }
        });
        SourceFilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceFilterComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(249, 188, 44));
        jLabel6.setText("FILTER BY: ");

        PaymentModeFilter.setBackground(new java.awt.Color(5, 76, 74));
        PaymentModeFilter.setForeground(new java.awt.Color(249, 188, 44));
        PaymentModeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CASH", "M-PESA", "CARD" }));
        PaymentModeFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PaymentModeFilterItemStateChanged(evt);
            }
        });
        PaymentModeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentModeFilterActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(249, 188, 44));
        jLabel7.setText("FILTER BY: ");

        ResetOrders1.setBackground(new java.awt.Color(5, 76, 74));
        ResetOrders1.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        ResetOrders1.setForeground(new java.awt.Color(255, 255, 255));
        ResetOrders1.setText("RESET");
        ResetOrders1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));
        ResetOrders1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetOrders1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(PaymentModeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(SourceFilterComboBox, 0, 99, Short.MAX_VALUE)
                .addGap(48, 48, 48)
                .addComponent(ResetOrders1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SourceFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(PaymentModeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(ResetOrders1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ReportsBtn.setBackground(new java.awt.Color(249, 188, 44));
        ReportsBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        ReportsBtn.setForeground(new java.awt.Color(12, 18, 35));
        ReportsBtn.setText("REPORTS");
        ReportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportsBtnActionPerformed(evt);
            }
        });

        ReportsBtn1.setBackground(new java.awt.Color(249, 188, 44));
        ReportsBtn1.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        ReportsBtn1.setForeground(new java.awt.Color(12, 18, 35));
        ReportsBtn1.setText("EXPENSES");
        ReportsBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportsBtn1ActionPerformed(evt);
            }
        });

        PrintOrders.setBackground(new java.awt.Color(249, 188, 44));
        PrintOrders.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        PrintOrders.setForeground(new java.awt.Color(12, 18, 35));
        PrintOrders.setIcon(new javax.swing.ImageIcon("C:\\Users\\ramgm\\Documents\\NetBeansProjects\\grabpos\\printer.png")); // NOI18N
        PrintOrders.setText("PRINT");
        PrintOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintOrdersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ItemsBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Sale, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Orders, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Logout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OrdersItemsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ReportsBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ReportsBtn1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Logo)
                        .addGap(32, 32, 32)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addComponent(PrintOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(SearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel3))
                                            .addComponent(jLabel2))
                                        .addGap(131, 131, 131))
                                    .addComponent(SearchOrder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(81, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PrintBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Sale)
                                .addGap(18, 18, 18)
                                .addComponent(ItemsBtn))
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Orders)
                                .addGap(18, 18, 18)
                                .addComponent(OrdersItemsBtn)
                                .addGap(18, 18, 18)
                                .addComponent(ReportsBtn1)
                                .addGap(18, 18, 18)
                                .addComponent(ReportsBtn)
                                .addGap(54, 54, 54)
                                .addComponent(Logo)
                                .addGap(73, 73, 73))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(11, 11, 11)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PrintOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Logout)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchBtn)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(PrintBtn)))
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void ShowItems()
    {
        try {
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/grabdb", "root", "admin");
            St = Con.createStatement();
            Rs = St.executeQuery("SELECT * FROM orders");

            // Create a DefaultTableModel to manipulate data
            DefaultTableModel model = new DefaultTableModel();
            model = (DefaultTableModel) DbUtils.resultSetToTableModel(Rs);

            // Calculate the sum of the total column
            int grandSum = 0;
            int totalPaid = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                grandSum += Integer.parseInt(model.getValueAt(i, 2).toString()); // Assuming the 'grandSum' column is at index 3
                totalPaid += Integer.parseInt(model.getValueAt(i, 3).toString()); // Assuming the 'totalPaid' column is at index 4
            }

            // Add a new row with the sum of the total column
            Object[] sumRow = {"Total", "", grandSum, totalPaid, "", ""}; // Adjust indices as per your table structure
            model.addRow(sumRow);

            // Set the model to the table
            OrdersTable.setModel(model);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        } finally {
            if (Rs != null) {
                try {
                    Rs.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }

            if (St != null) {
                try {
                    St.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }

            if (Con != null) {
                try {
                    Con.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
        }
    }
    
    private void FilterPaymentMode() {
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/grabdb", "root", "admin");
            Statement st = con.createStatement()) {

            String selectedCategory = PaymentModeFilter.getSelectedItem().toString();
            String query;

            if (!"".equals(selectedCategory)) {
                query = "SELECT * FROM orders WHERE payment_mode = '" + selectedCategory + "'";
            } else {
                query = "SELECT * FROM orders"; // This should be 'orders', not 'items'
            }

            ResultSet rs = st.executeQuery(query);

            // Create a DefaultTableModel to manipulate data
            DefaultTableModel model = (DefaultTableModel) DbUtils.resultSetToTableModel(rs);

            // Calculate the sums of the relevant columns
            int totalGrandSum = 0;
            int totalPaid = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                totalGrandSum += Integer.parseInt(model.getValueAt(i, 2).toString()); // Assuming 'grand_total' column is at index 3
                totalPaid += Integer.parseInt(model.getValueAt(i, 3).toString()); // Assuming 'amount_paid' column is at index 4
            }

            // Add a new row with the sums
            Object[] sumRow = {"Total", "", totalGrandSum, totalPaid, "", ""}; // Adjust indices as per your table structure
            model.addRow(sumRow);

            // Set the model to the table
            OrdersTable.setModel(model);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }

    
    private void FilterSaleBy() {
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/grabdb", "root", "admin");
             Statement st = con.createStatement()) {

            String selectedCategory = SourceFilterComboBox.getSelectedItem().toString();
            String query;

            if (!"".equals(selectedCategory)) {
                query = "SELECT * FROM orders WHERE sale_by = '" + selectedCategory + "'";
            } else {
                query = "SELECT * FROM items";
            }

            ResultSet rs = st.executeQuery(query);

            // Create a DefaultTableModel to manipulate data
            DefaultTableModel model = (DefaultTableModel) DbUtils.resultSetToTableModel(rs);

            // Calculate the sums of the relevant columns
            int totalGrandSum = 0;
            int totalPaid = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                totalGrandSum += Integer.parseInt(model.getValueAt(i, 2).toString()); // Assuming 'grand_total' column is at index 3
                totalPaid += Integer.parseInt(model.getValueAt(i, 3).toString()); // Assuming 'amount_paid' column is at index 4
            }

            // Add a new row with the sums
            Object[] sumRow = {"Total", "", totalGrandSum, totalPaid, "", ""}; // Adjust indices as per your table structure
            model.addRow(sumRow);

            // Set the model to the table
            OrdersTable.setModel(model);
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }
    
    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
        // Retrieve the order_id from the text field
        String orderId = SearchOrder.getText();

        // Check if the order_id is not empty
        if (orderId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter an Order ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Database connection variables
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Establish the database connection
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/grabdb", "root", "admin");

            // SQL query to select item_name, item_price, quantity, and total from order_items where order_id matches
            String query = "SELECT item_name, item_price, item_quantity, total FROM order_items WHERE order_id = ?";

            // Create the PreparedStatement
            pstmt = con.prepareStatement(query);

            // Set the order_id parameter
            pstmt.setString(1, orderId);

            // Execute the query
            rs = pstmt.executeQuery();

            // Create a DefaultTableModel to manipulate data
            DefaultTableModel model = (DefaultTableModel) DbUtils.resultSetToTableModel(rs);

            // Set the model to the ResultsTable
            OrderDetails.setModel(model);

        } catch (SQLException e) {
            // Display the error message in case of a database error
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Close resources
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
            if (pstmt != null) {
                try {
                    pstmt.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
        }
    }//GEN-LAST:event_SearchBtnActionPerformed

    private void SaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaleActionPerformed
        // TODO add your handling code here:
        new Sale().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_SaleActionPerformed

    private void ItemsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemsBtnActionPerformed
        // TODO add your handling code here:
        new Items().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ItemsBtnActionPerformed

    private void OrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdersActionPerformed
        // TODO add your handling code here:
        new Orders().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_OrdersActionPerformed

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutActionPerformed
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_LogoutActionPerformed

    private void LogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutMouseClicked
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_LogoutMouseClicked

    private void OrdersItemsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdersItemsBtnActionPerformed
        // TODO add your handling code here:
        new OrderItems().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_OrdersItemsBtnActionPerformed

    private void PrintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintBtnActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_PrintBtnActionPerformed

    private void SearchOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchOrderActionPerformed

    private void OrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrdersTableMouseClicked
        // No Editing
        boolean a=OrdersTable.isEditing();
        if(a==false){
            JOptionPane.showMessageDialog(null, "No Editing Please!");
        }
    }//GEN-LAST:event_OrdersTableMouseClicked

    private void SearchOrderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchOrderFocusGained
        // TODO add your handling code here:
        if(SearchOrder.getText().equals("Enter Order No."))
        {
            SearchOrder.setText("");
        }
    }//GEN-LAST:event_SearchOrderFocusGained

    private void SearchOrderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchOrderFocusLost
        // TODO add your handling code here:
        // TODO add your handling code here:
        if(SearchOrder.getText().equals(""))
        {
            SearchOrder.setText("Enter Order No.");
        }
    }//GEN-LAST:event_SearchOrderFocusLost

    private void ResetOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetOrdersActionPerformed
        // TODO add your handling code here:
        ShowItems();
    }//GEN-LAST:event_ResetOrdersActionPerformed

    private void SearchOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchOrdersActionPerformed
        // Formatting the date range
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        String jdStr = sdf.format(sdate.getDate());
        String jd1Str = sdf.format(edate.getDate());
        
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/grabdb", "root", "admin");

            // Prepare the SQL query with placeholders to avoid SQL injection
            String sql = "SELECT * FROM orders WHERE order_date_time >= ? AND order_date_time <= ?";

            // Creating the PreparedStatement
            pstmt = Con.prepareStatement(sql);

            // Setting the date parameters
            pstmt.setString(1, jdStr);
            pstmt.setString(2, jd1Str);

            // Execute the query
            rs = pstmt.executeQuery();

            // Create a DefaultTableModel to manipulate data
            DefaultTableModel model = new DefaultTableModel();
            model = (DefaultTableModel) DbUtils.resultSetToTableModel(rs);

            // Calculate the sum of the total column
            int totalGrandSum = 0;
            int totalPaid = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                totalGrandSum += Integer.parseInt(model.getValueAt(i, 2).toString()); // Assuming the 'total' column is at index 2
                totalPaid += Integer.parseInt(model.getValueAt(i, 3).toString()); // Assuming the 'total' column is at index 3
            }

            // Add a new row with the sum of the total column
            Object[] sumRow = {"Total", "", totalGrandSum, totalPaid, "", ""}; // Adjust indices as per your table structure
            model.addRow(sumRow);

            // Set the model to the table
            OrdersTable.setModel(model);

        } catch (SQLException e) {
            // Properly log the exception and show an error message to the user
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, "Error fetching order items", e);
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Close resources
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }

            if (pstmt != null) {
                try {
                    pstmt.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }

            if (Con != null) {
                try {
                    Con.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
        }
    }//GEN-LAST:event_SearchOrdersActionPerformed

    private void SourceFilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceFilterComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SourceFilterComboBoxActionPerformed

    private void PaymentModeFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PaymentModeFilterItemStateChanged
        // TODO add your handling code here:
        FilterPaymentMode();
    }//GEN-LAST:event_PaymentModeFilterItemStateChanged

    private void SourceFilterComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SourceFilterComboBoxItemStateChanged
        // TODO add your handling code here:
        FilterSaleBy();
    }//GEN-LAST:event_SourceFilterComboBoxItemStateChanged

    private void ResetOrders1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetOrders1ActionPerformed
        // TODO add your handling code here:
        ShowItems();
    }//GEN-LAST:event_ResetOrders1ActionPerformed

    private void ReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportsBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReportsBtnActionPerformed

    private void ReportsBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportsBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReportsBtn1ActionPerformed

    private void PaymentModeFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentModeFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PaymentModeFilterActionPerformed

    private void PrintOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintOrdersActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        SimpleDateFormat Date_Format = new SimpleDateFormat("YYYY-MM-dd"); 
        String datefrom=  Date_Format.format(sdate.getDate());
        String dateto=  Date_Format.format(edate.getDate());
       
        MessageFormat header=new MessageFormat("Report From "+datefrom+" To " +dateto);
        MessageFormat footer=new MessageFormat("page{0,number,integer}");
        try {
            OrdersTable.print(JTable.PrintMode.FIT_WIDTH, header, footer);
            
        } catch (Exception e) {
            e.getMessage();
        }
    }//GEN-LAST:event_PrintOrdersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Orders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ItemsBtn;
    private javax.swing.JLabel Logo;
    private javax.swing.JButton Logout;
    private javax.swing.JTable OrderDetails;
    private javax.swing.JButton Orders;
    private javax.swing.JButton OrdersItemsBtn;
    private javax.swing.JTable OrdersTable;
    private javax.swing.JComboBox<String> PaymentModeFilter;
    private javax.swing.JButton PrintBtn;
    private javax.swing.JButton PrintOrders;
    private javax.swing.JButton ReportsBtn;
    private javax.swing.JButton ReportsBtn1;
    private javax.swing.JButton ResetOrders;
    private javax.swing.JButton ResetOrders1;
    private javax.swing.JButton Sale;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JTextField SearchOrder;
    private javax.swing.JButton SearchOrders;
    private javax.swing.JComboBox<String> SourceFilterComboBox;
    private com.toedter.calendar.JDateChooser edate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser sdate;
    // End of variables declaration//GEN-END:variables
}
