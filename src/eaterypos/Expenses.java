
package eaterypos;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author ramgm
 */
public class Expenses extends javax.swing.JFrame {

    /**
     * Creates new form Expenses
     */
    public Expenses() {
        initComponents();
        ShowItems();
        loadCategoriesFromFile();
    }
    
    ResultSet Rs = null, Rs1 = null;
    Connection Con = null;
    Statement St = null, St1 = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    int ItemID;
    private void CountItems() {
        try {
            // Establish connection
            Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");

            // Create and execute the query to get the maximum ItemID
            St1 = Con.createStatement();
            Rs1 = St1.executeQuery("SELECT MAX(expense_id) FROM expenses");

            // Check if there are any existing records
            if (Rs1.next()) {
                // If there are existing records, get the maximum ItemID and increment it by 1
                ItemID = Rs1.getInt(1) + 1;
            } else {
                // If there are no existing records, start with ItemID = 1
                ItemID = 1;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
        } finally {
            // Close the ResultSet and Statement
            if (Rs1 != null) {
                try {
                    Rs1.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
            if (St1 != null) {
                try {
                    St1.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
        }
    }
    
    private void ShowItems()
    {
    	try {
            Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");
            St = Con.createStatement();
            Rs = St.executeQuery("SELECT * FROM expenses");
            ExpenseList.setModel(DbUtils.resultSetToTableModel(Rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        } finally {
            if (Rs != null) {
                try {
                    Rs.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }

            if (St != null) {
                try {
                    St.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }

            if (Con != null) {
                try {
                    Con.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
        }
    }
    
    private void FilterItems() {
        try (Connection con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");
             Statement st = con.createStatement()) {

            String selectedCategory = FilterType.getSelectedItem().toString();
            String query;

            if (!"All Types".equals(selectedCategory)) {
                query = "SELECT * FROM expenses WHERE type = '" + selectedCategory + "'";
            } else {
                query = "SELECT * FROM expenses";
            }

            ResultSet rs = st.executeQuery(query);
            ExpenseList.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }
    
    private void clearFields() 
    {
                ItemName.setText("");
                ItemPrice.setText("");
                SupplierList.setSelectedIndex(-1);
                TypeList.setSelectedIndex(-1);
                QuantityExp.setSelectedIndex(-1);
                MetricExp.setSelectedIndex(-1);
                DescriptionTxt.setText("");
                Key = 0;
    }
    
    // Method to save categories to a file
    private void saveSupplierToFile() {
        List<String> suppliers = new ArrayList<>();
        for (int i = 0; i < SupplierList.getItemCount(); i++) {
            suppliers.add(SupplierList.getItemAt(i));
        }
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("C:\\Users\\ramgm\\Documents\\suppliers.dat"))) {
            oos.writeObject(suppliers);
        } catch (IOException e) {
        }
    }
    
    // Method to load categories from a file
    private void loadCategoriesFromFile() {
        File file = new File("./suppliers.dat");
        if (file.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {
                List<String> suppliers = (List<String>) ois.readObject();
                for (String supplier : suppliers) {
                    SupplierList.addItem(supplier);
                }
            } catch (IOException | ClassNotFoundException e) {
            }
        }
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ExpenseList = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        ItemName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ItemPrice = new javax.swing.JTextField();
        AddItemBtn = new javax.swing.JButton();
        SupplierList = new javax.swing.JComboBox<>();
        SaleBtn = new javax.swing.JButton();
        ItemsBtn = new javax.swing.JButton();
        OrdersBtn = new javax.swing.JButton();
        LogoutBtn = new javax.swing.JButton();
        UpdateItemBtn = new javax.swing.JButton();
        RemoveItemBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        FilterType = new javax.swing.JComboBox<>();
        AddCategBtn1 = new javax.swing.JButton();
        Logo = new javax.swing.JLabel();
        OrderItemsBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        DescriptionTxt = new javax.swing.JTextArea();
        description = new javax.swing.JLabel();
        QuantityExp = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        MetricExp = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        AddSupplier = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        TypeList = new javax.swing.JComboBox<>();
        SupplierName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        ExpensesBtn = new javax.swing.JButton();
        ReportsBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(12, 18, 35));
        jLabel1.setText("EXPENSES LIST");

        jLabel2.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(12, 18, 35));
        jLabel2.setText("ADD EXPENSE");

        ExpenseList.setBackground(new java.awt.Color(5, 76, 74));
        ExpenseList.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        ExpenseList.setForeground(new java.awt.Color(249, 188, 44));
        ExpenseList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item ID", "Name", "Category", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        }
    );
    ExpenseList.setRowHeight(30);
    ExpenseList.setShowGrid(true);
    ExpenseList.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            ExpenseListMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(ExpenseList);

    jLabel3.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    jLabel3.setForeground(new java.awt.Color(5, 76, 74));
    jLabel3.setText("ITEM NAME");

    ItemName.setBackground(new java.awt.Color(207, 217, 214));
    ItemName.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    ItemName.setForeground(new java.awt.Color(12, 18, 35));
    ItemName.setToolTipText("");
    ItemName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

    jLabel4.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    jLabel4.setForeground(new java.awt.Color(5, 76, 74));
    jLabel4.setText("SUPPLIER");

    jLabel5.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    jLabel5.setForeground(new java.awt.Color(5, 76, 74));
    jLabel5.setText("PRICE");

    ItemPrice.setBackground(new java.awt.Color(207, 217, 214));
    ItemPrice.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    ItemPrice.setForeground(new java.awt.Color(12, 18, 35));
    ItemPrice.setToolTipText("");
    ItemPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

    AddItemBtn.setBackground(new java.awt.Color(249, 188, 44));
    AddItemBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    AddItemBtn.setForeground(new java.awt.Color(12, 18, 35));
    AddItemBtn.setText("ADD");
    AddItemBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            AddItemBtnActionPerformed(evt);
        }
    });

    SupplierList.setBackground(new java.awt.Color(207, 217, 214));
    SupplierList.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    SupplierList.setForeground(new java.awt.Color(12, 18, 35));
    SupplierList.setMaximumRowCount(31);
    SupplierList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));
    SupplierList.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            SupplierListFocusGained(evt);
        }
    });

    SaleBtn.setBackground(new java.awt.Color(249, 188, 44));
    SaleBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    SaleBtn.setForeground(new java.awt.Color(12, 18, 35));
    SaleBtn.setText("SALE");
    SaleBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            SaleBtnActionPerformed(evt);
        }
    });

    ItemsBtn.setBackground(new java.awt.Color(249, 188, 44));
    ItemsBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    ItemsBtn.setForeground(new java.awt.Color(12, 18, 35));
    ItemsBtn.setText("ITEMS");
    ItemsBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ItemsBtnActionPerformed(evt);
        }
    });

    OrdersBtn.setBackground(new java.awt.Color(249, 188, 44));
    OrdersBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    OrdersBtn.setForeground(new java.awt.Color(12, 18, 35));
    OrdersBtn.setText("ORDERS");
    OrdersBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            OrdersBtnActionPerformed(evt);
        }
    });

    LogoutBtn.setBackground(new java.awt.Color(255, 0, 51));
    LogoutBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    LogoutBtn.setForeground(new java.awt.Color(12, 18, 35));
    LogoutBtn.setText("LOGOUT");
    LogoutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            LogoutBtnMouseClicked(evt);
        }
    });
    LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            LogoutBtnActionPerformed(evt);
        }
    });

    UpdateItemBtn.setBackground(new java.awt.Color(5, 76, 74));
    UpdateItemBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    UpdateItemBtn.setForeground(new java.awt.Color(249, 188, 44));
    UpdateItemBtn.setText("UPDATE");
    UpdateItemBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            UpdateItemBtnActionPerformed(evt);
        }
    });

    RemoveItemBtn.setBackground(new java.awt.Color(255, 0, 51));
    RemoveItemBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    RemoveItemBtn.setForeground(new java.awt.Color(12, 18, 35));
    RemoveItemBtn.setText("REMOVE");
    RemoveItemBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            RemoveItemBtnActionPerformed(evt);
        }
    });

    jLabel8.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    jLabel8.setForeground(new java.awt.Color(0, 0, 0));
    jLabel8.setText("Filter By Type");

    FilterType.setBackground(new java.awt.Color(207, 217, 214));
    FilterType.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    FilterType.setForeground(new java.awt.Color(12, 18, 35));
    FilterType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Types", "Food", "Non-Food", "Ingredient", "Service" }));
    FilterType.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));
    FilterType.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            FilterTypeItemStateChanged(evt);
        }
    });
    FilterType.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            FilterTypeActionPerformed(evt);
        }
    });

    AddCategBtn1.setBackground(new java.awt.Color(5, 76, 74));
    AddCategBtn1.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    AddCategBtn1.setForeground(new java.awt.Color(249, 188, 44));
    AddCategBtn1.setText("REFRESH");
    AddCategBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            AddCategBtn1MouseClicked(evt);
        }
    });
    AddCategBtn1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            AddCategBtn1ActionPerformed(evt);
        }
    });

    Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/80x80.png"))); // NOI18N

    OrderItemsBtn.setBackground(new java.awt.Color(249, 188, 44));
    OrderItemsBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    OrderItemsBtn.setForeground(new java.awt.Color(12, 18, 35));
    OrderItemsBtn.setText("ORDER ITEMS");
    OrderItemsBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            OrderItemsBtnActionPerformed(evt);
        }
    });

    DescriptionTxt.setBackground(new java.awt.Color(5, 76, 74));
    DescriptionTxt.setColumns(5);
    DescriptionTxt.setForeground(new java.awt.Color(249, 188, 44));
    DescriptionTxt.setLineWrap(true);
    DescriptionTxt.setRows(2);
    DescriptionTxt.setTabSize(4);
    jScrollPane2.setViewportView(DescriptionTxt);

    description.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    description.setForeground(new java.awt.Color(5, 76, 74));
    description.setText("DESCRIPTION");

    QuantityExp.setBackground(new java.awt.Color(207, 217, 214));
    QuantityExp.setEditable(true);
    QuantityExp.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    QuantityExp.setForeground(new java.awt.Color(12, 18, 35));
    QuantityExp.setMaximumRowCount(31);
    QuantityExp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));
    QuantityExp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

    jLabel6.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    jLabel6.setForeground(new java.awt.Color(5, 76, 74));
    jLabel6.setText("QUANTITY");

    MetricExp.setBackground(new java.awt.Color(207, 217, 214));
    MetricExp.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    MetricExp.setForeground(new java.awt.Color(12, 18, 35));
    MetricExp.setMaximumRowCount(31);
    MetricExp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kg", "Grams", "Ltrs", "Hrs" }));
    MetricExp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

    jLabel7.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    jLabel7.setForeground(new java.awt.Color(5, 76, 74));
    jLabel7.setText("METRIC");

    AddSupplier.setBackground(new java.awt.Color(249, 188, 44));
    AddSupplier.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    AddSupplier.setForeground(new java.awt.Color(12, 18, 35));
    AddSupplier.setText("ADD SUPPLIER");
    AddSupplier.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            AddSupplierActionPerformed(evt);
        }
    });

    jLabel9.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    jLabel9.setForeground(new java.awt.Color(5, 76, 74));
    jLabel9.setText("TYPE");

    TypeList.setBackground(new java.awt.Color(207, 217, 214));
    TypeList.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    TypeList.setForeground(new java.awt.Color(12, 18, 35));
    TypeList.setMaximumRowCount(31);
    TypeList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food", "Non-Food", "Ingredient", "Service" }));
    TypeList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

    SupplierName.setBackground(new java.awt.Color(207, 217, 214));
    SupplierName.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    SupplierName.setForeground(new java.awt.Color(12, 18, 35));
    SupplierName.setToolTipText("");
    SupplierName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

    jLabel10.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
    jLabel10.setForeground(new java.awt.Color(5, 76, 74));
    jLabel10.setText("SUPPLIER NAME");

    ExpensesBtn.setBackground(new java.awt.Color(249, 188, 44));
    ExpensesBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    ExpensesBtn.setForeground(new java.awt.Color(12, 18, 35));
    ExpensesBtn.setText("EXPENSES");
    ExpensesBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ExpensesBtnActionPerformed(evt);
        }
    });

    ReportsBtn.setBackground(new java.awt.Color(249, 188, 44));
    ReportsBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
    ReportsBtn.setForeground(new java.awt.Color(12, 18, 35));
    ReportsBtn.setText("REPORTS");
    ReportsBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ReportsBtnActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(28, 28, 28)
                            .addComponent(Logo)
                            .addGap(11, 11, 11))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(FilterType, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(18, 18, 18))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(ExpensesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SaleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ItemsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OrdersBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OrderItemsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(LogoutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ReportsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGap(29, 29, 29)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(227, 227, 227)
                    .addComponent(AddCategBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(208, 208, 208)))
            .addGap(30, 30, 30)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(ItemName)
                    .addComponent(SupplierList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel5)
                    .addComponent(ItemPrice)
                    .addComponent(AddItemBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UpdateItemBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RemoveItemBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(description)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(QuantityExp, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(48, 48, 48)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(MetricExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(AddSupplier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addComponent(TypeList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jLabel10))
            .addGap(30, 30, 30))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(17, 17, 17)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(SaleBtn)
                    .addGap(18, 18, 18)
                    .addComponent(ItemsBtn)
                    .addGap(18, 18, 18)
                    .addComponent(OrdersBtn)
                    .addGap(18, 18, 18)
                    .addComponent(OrderItemsBtn)
                    .addGap(18, 18, 18)
                    .addComponent(ExpensesBtn)
                    .addGap(18, 18, 18)
                    .addComponent(ReportsBtn)
                    .addGap(52, 52, 52)
                    .addComponent(jLabel8)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(FilterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(Logo))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel2)
                    .addGap(19, 19, 19)
                    .addComponent(jLabel3)
                    .addGap(5, 5, 5)
                    .addComponent(ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(QuantityExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MetricExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(SupplierList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel10)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(SupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(AddSupplier)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(description)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel9)
                    .addGap(3, 3, 3)
                    .addComponent(TypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(ItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(AddItemBtn)
                    .addGap(18, 18, 18)
                    .addComponent(UpdateItemBtn)
                    .addGap(18, 18, 18)
                    .addComponent(RemoveItemBtn))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1)
                    .addGap(12, 12, 12)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LogoutBtn)
                        .addComponent(AddCategBtn1))))
            .addGap(31, 31, 31))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    setSize(new java.awt.Dimension(1074, 658));
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    int Key = 0;
    private void ExpenseListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExpenseListMouseClicked
        DefaultTableModel model = (DefaultTableModel) ExpenseList.getModel();
        int MyIndex = ExpenseList.getSelectedRow();
        Key = Integer.parseInt(model.getValueAt(MyIndex, 0).toString());
        ItemName.setText(model.getValueAt(MyIndex, 1).toString());
        QuantityExp.setSelectedItem(model.getValueAt(MyIndex, 5).toString());
        TypeList.setSelectedItem(model.getValueAt(MyIndex, 4).toString());
        MetricExp.setSelectedItem(model.getValueAt(MyIndex, 6).toString());
        ItemPrice.setText(model.getValueAt(MyIndex, 7).toString());
        DescriptionTxt.setText(model.getValueAt(MyIndex, 2).toString());
        SupplierName.setText(model.getValueAt(MyIndex, 3).toString());
    }//GEN-LAST:event_ExpenseListMouseClicked

    private void AddItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemBtnActionPerformed
        // ADD Items
        if (ItemName.getText().isEmpty() || ItemPrice.getText().isEmpty() || SupplierList.getSelectedIndex() == -1 || 
            TypeList.getSelectedIndex() == -1 || QuantityExp.getSelectedItem() == null || MetricExp.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Please Fill All Details");
        } else {
            try {
                // Establish connection
                Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");

                // Call CountItems() to generate the next ItemID
                CountItems();

                // Get the current date and time
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
                String formattedDateTime = now.format(formatter);

                // Prepare the insert query
                String insertQuery = "INSERT INTO expenses (expense_id, item_name, description, supplier, type, quantity, metric, price, date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

                try (PreparedStatement Pst = Con.prepareStatement(insertQuery)) {
                    // Set parameters for the insert query
                    Pst.setInt(1, ItemID); // Assign the generated ItemID
                    Pst.setString(2, ItemName.getText());
                    Pst.setString(3, DescriptionTxt.getText());
                    Pst.setString(4, SupplierList.getSelectedItem().toString());
                    Pst.setString(5, TypeList.getSelectedItem().toString());

                    // Retrieve and convert the quantity input
                    String quantityInput = QuantityExp.getEditor().getItem().toString();
                    int quantity = Integer.parseInt(quantityInput);
                    Pst.setInt(6, quantity);

                    Pst.setString(7, MetricExp.getSelectedItem().toString());
                    Pst.setInt(8, Integer.parseInt(ItemPrice.getText()));
                    Pst.setString(9, formattedDateTime);

                    // Execute the insert query
                    int row = Pst.executeUpdate();

                    if (row > 0) {
                        JOptionPane.showMessageDialog(this, "Item Added Successfully");
                        ShowItems();
                        clearFields(); // Clear text fields after successful insertion
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to add item");
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid quantity and price");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
            } finally {
                if (Con != null) {
                    try {
                        Con.close();
                    } catch (SQLException ex) {
                        // Handle close exception if necessary
                    }
                }
            }
        }
    }//GEN-LAST:event_AddItemBtnActionPerformed

    private void SaleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaleBtnActionPerformed
        // TODO add your handling code here:
        new Sale().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_SaleBtnActionPerformed

    private void ItemsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemsBtnActionPerformed
        // TODO add your handling code here:
        new Items().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ItemsBtnActionPerformed

    private void OrdersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdersBtnActionPerformed
        // TODO add your handling code here:
        new Orders().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_OrdersBtnActionPerformed

    private void LogoutBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutBtnMouseClicked
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_LogoutBtnMouseClicked

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LogoutBtnActionPerformed

    private void UpdateItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateItemBtnActionPerformed
        // Edit Items
        if (ItemName.getText().isEmpty() || ItemPrice.getText().isEmpty() || SupplierName.getText().isEmpty() || TypeList.getSelectedIndex() == -1 || QuantityExp.getSelectedIndex() == -1 || MetricExp.getSelectedIndex() == -1 || ItemPrice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Fill All Details");
        } else {
            try {
                Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");
                String updateQuery = "UPDATE expenses SET item_name = ?, description = ?, supplier = ?, type = ?, quantity = ?, metric = ?, price = ? WHERE expense_id = ?";

                try (PreparedStatement Pst = Con.prepareStatement(updateQuery)) {
                    Pst.setString(1, ItemName.getText());
                    Pst.setString(2, DescriptionTxt.getText());
                    Pst.setString(3, SupplierName.getText());
                    Pst.setString(4, TypeList.getSelectedItem().toString());
                    Pst.setInt(5, Integer.parseInt(QuantityExp.getSelectedItem().toString())); 
                    Pst.setString(6, MetricExp.getSelectedItem().toString());   
                    Pst.setInt(7, Integer.parseInt(ItemPrice.getText()));
                    Pst.setInt(8, Key);

                    int row = Pst.executeUpdate();

                    if (row > 0) {
                        JOptionPane.showMessageDialog(this, "Updated Successfully");
                        ShowItems();
                        clearFields();
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to Update Item");
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid price");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
            } finally {
                if (Con != null) {
                    try {
                        Con.close();
                    } catch (SQLException ex) {
                        // Handle close exception if necessary
                    }
                }
            }
        }
    }//GEN-LAST:event_UpdateItemBtnActionPerformed

    private void RemoveItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveItemBtnActionPerformed
        // REMOVE AN ITEM
        if (Key == 0) {
            JOptionPane.showMessageDialog(this, "Please select an item to delete");
        } else {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this item?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");
                    String deleteQuery = "DELETE FROM expenses WHERE expense_id = ?";

                    try (PreparedStatement Pst = Con.prepareStatement(deleteQuery)) {
                        Pst.setInt(1, Key);

                        int row = Pst.executeUpdate();

                        if (row > 0) {
                            JOptionPane.showMessageDialog(this, "Expense Item Deleted Successfully");
                            ShowItems();
                            clearFields();
                        } else {
                            JOptionPane.showMessageDialog(this, "Failed to Delete Expense Item");
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
                } finally {
                    if (Con != null) {
                        try {
                            Con.close();
                        } catch (SQLException ex) {
                            // Handle close exception if necessary
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_RemoveItemBtnActionPerformed

    private void FilterTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FilterTypeItemStateChanged
        // Filter By Category
        FilterItems();
    }//GEN-LAST:event_FilterTypeItemStateChanged

    private void FilterTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FilterTypeActionPerformed

    private void AddCategBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddCategBtn1MouseClicked
        // REFRESH ITEMS TABLE
        ShowItems();
    }//GEN-LAST:event_AddCategBtn1MouseClicked

    private void AddCategBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCategBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddCategBtn1ActionPerformed

    private void OrderItemsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderItemsBtnActionPerformed
        // TODO add your handling code here:
        new OrderItems().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_OrderItemsBtnActionPerformed

    private void AddSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSupplierActionPerformed
        // Get the category name from the text field
        String supplierName = SupplierName.getText().trim();

        // Check if the category name is valid (not empty)
        if (supplierName.isEmpty()) {
            // Show a warning message if the category name is empty
            javax.swing.JOptionPane.showMessageDialog(null, "Please enter a Supplier name.", "Invalid input", javax.swing.JOptionPane.WARNING_MESSAGE);
        } else {
            // Add the category to the combo box
            SupplierList.addItem(supplierName);

            // Save the categories to the file
            saveSupplierToFile();

            // Optionally, clear the text field after adding
            SupplierName.setText("");
        }
    }//GEN-LAST:event_AddSupplierActionPerformed

    private void SupplierListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SupplierListFocusGained
        // TODO add your handling code here:
        loadCategoriesFromFile();
    }//GEN-LAST:event_SupplierListFocusGained

    private void ExpensesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpensesBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExpensesBtnActionPerformed

    private void ReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportsBtnActionPerformed
        // TODO add your handling code here:
        new eaterypos.reports.SelectReport().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ReportsBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Expenses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Expenses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Expenses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Expenses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Expenses().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCategBtn1;
    private javax.swing.JButton AddItemBtn;
    private javax.swing.JButton AddSupplier;
    private javax.swing.JTextArea DescriptionTxt;
    private javax.swing.JTable ExpenseList;
    private javax.swing.JButton ExpensesBtn;
    private javax.swing.JComboBox<String> FilterType;
    private javax.swing.JTextField ItemName;
    private javax.swing.JTextField ItemPrice;
    private javax.swing.JButton ItemsBtn;
    private javax.swing.JLabel Logo;
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JComboBox<String> MetricExp;
    private javax.swing.JButton OrderItemsBtn;
    private javax.swing.JButton OrdersBtn;
    private javax.swing.JComboBox<String> QuantityExp;
    private javax.swing.JButton RemoveItemBtn;
    private javax.swing.JButton ReportsBtn;
    private javax.swing.JButton SaleBtn;
    private javax.swing.JComboBox<String> SupplierList;
    private javax.swing.JTextField SupplierName;
    private javax.swing.JComboBox<String> TypeList;
    private javax.swing.JButton UpdateItemBtn;
    private javax.swing.JLabel description;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
