package eaterypos;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author ramjius muhsin
 */
public class Items extends javax.swing.JFrame {

    public Items() {
        initComponents();
        ShowItems();
        Seticon();
    }
    ResultSet Rs = null, Rs1 = null;
    Connection Con = null;
    Statement St = null, St1 = null;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "serial"})
    
    private void Seticon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Eatery POS.png")));
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemsList = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        ItemName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ItemPrice = new javax.swing.JTextField();
        AddItemBtn = new javax.swing.JButton();
        CategoryList = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CategoryName = new javax.swing.JTextField();
        AddCategBtn = new javax.swing.JButton();
        SaleBtn = new javax.swing.JButton();
        ItemsBtn = new javax.swing.JButton();
        OrdersBtn = new javax.swing.JButton();
        LogoutBtn = new javax.swing.JButton();
        EditItemBtn = new javax.swing.JButton();
        RemoveItemBtn = new javax.swing.JButton();
        RemoveCategBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        FilterCategory = new javax.swing.JComboBox<>();
        AddCategBtn1 = new javax.swing.JButton();
        Logo = new javax.swing.JLabel();
        OrderItemsBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(12, 18, 35));
        jLabel1.setText("ITEMS LIST");

        jLabel2.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(12, 18, 35));
        jLabel2.setText("ADD ITEMS");

        ItemsList.setBackground(new java.awt.Color(5, 76, 74));
        ItemsList.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        ItemsList.setForeground(new java.awt.Color(249, 188, 44));
        ItemsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item ID", "Name", "Category", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ItemsList.setRowHeight(30);
        ItemsList.setShowGrid(true);
        ItemsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ItemsList);

        jLabel3.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(5, 76, 74));
        jLabel3.setText("ITEM NAME");

        ItemName.setBackground(new java.awt.Color(207, 217, 214));
        ItemName.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        ItemName.setForeground(new java.awt.Color(12, 18, 35));
        ItemName.setToolTipText("");
        ItemName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

        jLabel4.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(5, 76, 74));
        jLabel4.setText("CATEGORY");

        jLabel5.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(5, 76, 74));
        jLabel5.setText("PRICE");

        ItemPrice.setBackground(new java.awt.Color(207, 217, 214));
        ItemPrice.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        ItemPrice.setForeground(new java.awt.Color(12, 18, 35));
        ItemPrice.setToolTipText("");
        ItemPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

        AddItemBtn.setBackground(new java.awt.Color(249, 188, 44));
        AddItemBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        AddItemBtn.setForeground(new java.awt.Color(12, 18, 35));
        AddItemBtn.setText("ADD");
        AddItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemBtnActionPerformed(evt);
            }
        });

        CategoryList.setBackground(new java.awt.Color(207, 217, 214));
        CategoryList.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        CategoryList.setForeground(new java.awt.Color(12, 18, 35));
        CategoryList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fries", "Pizza Sleeves", "Wraps", "Chicken Wings", "Burger", "Meatballs", "Sandwiches", "Asian", "Salads", "Dessert" }));
        CategoryList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

        jLabel6.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(12, 18, 35));
        jLabel6.setText("ADD CATEGORY");

        jLabel7.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(5, 76, 74));
        jLabel7.setText("CATEGORY NAME");

        CategoryName.setBackground(new java.awt.Color(207, 217, 214));
        CategoryName.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        CategoryName.setForeground(new java.awt.Color(12, 18, 35));
        CategoryName.setToolTipText("");
        CategoryName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));

        AddCategBtn.setBackground(new java.awt.Color(249, 188, 44));
        AddCategBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        AddCategBtn.setForeground(new java.awt.Color(12, 18, 35));
        AddCategBtn.setText("ADD");
        AddCategBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCategBtnActionPerformed(evt);
            }
        });

        SaleBtn.setBackground(new java.awt.Color(249, 188, 44));
        SaleBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        SaleBtn.setForeground(new java.awt.Color(12, 18, 35));
        SaleBtn.setText("SALE");
        SaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaleBtnActionPerformed(evt);
            }
        });

        ItemsBtn.setBackground(new java.awt.Color(249, 188, 44));
        ItemsBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        ItemsBtn.setForeground(new java.awt.Color(12, 18, 35));
        ItemsBtn.setText("ITEMS");
        ItemsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemsBtnActionPerformed(evt);
            }
        });

        OrdersBtn.setBackground(new java.awt.Color(249, 188, 44));
        OrdersBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        OrdersBtn.setForeground(new java.awt.Color(12, 18, 35));
        OrdersBtn.setText("ORDERS");
        OrdersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdersBtnActionPerformed(evt);
            }
        });

        LogoutBtn.setBackground(new java.awt.Color(255, 0, 51));
        LogoutBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        LogoutBtn.setForeground(new java.awt.Color(12, 18, 35));
        LogoutBtn.setText("LOGOUT");
        LogoutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogoutBtnMouseClicked(evt);
            }
        });
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        EditItemBtn.setBackground(new java.awt.Color(249, 188, 44));
        EditItemBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        EditItemBtn.setForeground(new java.awt.Color(12, 18, 35));
        EditItemBtn.setText("UPDATE");
        EditItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditItemBtnActionPerformed(evt);
            }
        });

        RemoveItemBtn.setBackground(new java.awt.Color(255, 0, 51));
        RemoveItemBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        RemoveItemBtn.setForeground(new java.awt.Color(12, 18, 35));
        RemoveItemBtn.setText("REMOVE");
        RemoveItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveItemBtnActionPerformed(evt);
            }
        });

        RemoveCategBtn.setBackground(new java.awt.Color(255, 0, 51));
        RemoveCategBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        RemoveCategBtn.setForeground(new java.awt.Color(12, 18, 35));
        RemoveCategBtn.setText("REMOVE");
        RemoveCategBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveCategBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Filter By Category");

        FilterCategory.setBackground(new java.awt.Color(207, 217, 214));
        FilterCategory.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        FilterCategory.setForeground(new java.awt.Color(12, 18, 35));
        FilterCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Categories", "Fries", "Pizza Sleeves", "Wraps", "Chicken Wings", "Burger", "Meatballs", "Sandwiches", "Asian", "Salads", "Dessert" }));
        FilterCategory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(249, 188, 44)));
        FilterCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FilterCategoryItemStateChanged(evt);
            }
        });

        AddCategBtn1.setBackground(new java.awt.Color(5, 76, 74));
        AddCategBtn1.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        AddCategBtn1.setForeground(new java.awt.Color(249, 188, 44));
        AddCategBtn1.setText("REFRESH");
        AddCategBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddCategBtn1MouseClicked(evt);
            }
        });
        AddCategBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCategBtn1ActionPerformed(evt);
            }
        });

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/80x80.png"))); // NOI18N

        OrderItemsBtn.setBackground(new java.awt.Color(249, 188, 44));
        OrderItemsBtn.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        OrderItemsBtn.setForeground(new java.awt.Color(12, 18, 35));
        OrderItemsBtn.setText("ORDER ITEMS");
        OrderItemsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderItemsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SaleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OrdersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LogoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OrderItemsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(Logo)))
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(FilterCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4)
                                .addComponent(ItemName)
                                .addComponent(jLabel5)
                                .addComponent(ItemPrice)
                                .addComponent(AddItemBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CategoryList, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EditItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(AddCategBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(RemoveItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(RemoveCategBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(307, 307, 307)
                .addComponent(AddCategBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(SaleBtn)
                        .addGap(18, 18, 18)
                        .addComponent(ItemsBtn)
                        .addGap(18, 18, 18)
                        .addComponent(OrdersBtn)
                        .addGap(18, 18, 18)
                        .addComponent(OrderItemsBtn)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FilterCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Logo)
                        .addGap(72, 72, 72)
                        .addComponent(LogoutBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3)
                        .addGap(5, 5, 5)
                        .addComponent(ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CategoryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AddItemBtn)
                        .addGap(18, 18, 18)
                        .addComponent(EditItemBtn)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveItemBtn)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AddCategBtn)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveCategBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddCategBtn1)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    int ItemID;
    private void CountItems() {
        try {
            // Establish connection
            Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");

            // Create and execute the query to get the maximum ItemID
            St1 = Con.createStatement();
            Rs1 = St1.executeQuery("SELECT MAX(ItemID) FROM items");

            // Check if there are any existing records
            if (Rs1.next()) {
                // If there are existing records, get the maximum ItemID and increment it by 1
                ItemID = Rs1.getInt(1) + 1;
            } else {
                // If there are no existing records, start with ItemID = 1
                ItemID = 1;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
        } finally {
            // Close the ResultSet and Statement
            if (Rs1 != null) {
                try {
                    Rs1.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
            if (St1 != null) {
                try {
                    St1.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
        }
    }

    
    private void ShowItems()
    {
    	try {
            Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");
            St = Con.createStatement();
            Rs = St.executeQuery("SELECT * FROM items");
            ItemsList.setModel(DbUtils.resultSetToTableModel(Rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        } finally {
            if (Rs != null) {
                try {
                    Rs.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }

            if (St != null) {
                try {
                    St.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }

            if (Con != null) {
                try {
                    Con.close();
                } catch (SQLException ex) {
                    // Handle close exception if necessary
                }
            }
        }
    }
    
    private void FilterItems() {
        try (Connection con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");
             Statement st = con.createStatement()) {

            String selectedCategory = FilterCategory.getSelectedItem().toString();
            String query;

            if (!"All Categories".equals(selectedCategory)) {
                query = "SELECT * FROM items WHERE Category = '" + selectedCategory + "'";
            } else {
                query = "SELECT * FROM items";
            }

            ResultSet rs = st.executeQuery(query);
            ItemsList.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }

    
    private void clearFields() 
    {
                ItemName.setText("");
                ItemPrice.setText("");
                CategoryList.setSelectedIndex(-1);
                Key = 0;
    }

    
    private void AddItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemBtnActionPerformed
        // ADD Items
        if (ItemName.getText().isEmpty() || ItemPrice.getText().isEmpty() || CategoryList.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Please Fill All Details");
        } else {
            try {
                // Establish connection
                Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");

                // Call CountItems() to generate the next ItemID
                CountItems();

                // Prepare the insert query
                String insertQuery = "INSERT INTO items (ItemID, Name, Category, price) VALUES (?, ?, ?, ?)";

                try (PreparedStatement Pst = Con.prepareStatement(insertQuery)) {
                    // Set parameters for the insert query
                    Pst.setInt(1, ItemID); // Assign the generated ItemID
                    Pst.setString(2, ItemName.getText());
                    Pst.setString(3, CategoryList.getSelectedItem().toString());
                    Pst.setInt(4, Integer.parseInt(ItemPrice.getText()));

                    // Execute the insert query
                    int row = Pst.executeUpdate();

                    if (row > 0) {
                        JOptionPane.showMessageDialog(this, "Item Added Successfully");
                        ShowItems();
                        clearFields(); // Clear text fields after successful insertion
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to add item");
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid price");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
            } finally {
                if (Con != null) {
                    try {
                        Con.close();
                    } catch (SQLException ex) {
                        // Handle close exception if necessary
                    }
                }
            }
        }
    }//GEN-LAST:event_AddItemBtnActionPerformed


    private void AddCategBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCategBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddCategBtnActionPerformed

    private void SaleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaleBtnActionPerformed
        // TODO add your handling code here:
        new Sale().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_SaleBtnActionPerformed

    private void ItemsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemsBtnActionPerformed
        // TODO add your handling code here:
        new Items().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ItemsBtnActionPerformed

    private void OrdersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdersBtnActionPerformed
        // TODO add your handling code here:
        new Orders().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_OrdersBtnActionPerformed

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LogoutBtnActionPerformed

    private void EditItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditItemBtnActionPerformed
        // Edit Items
        if (ItemName.getText().isEmpty() || ItemPrice.getText().isEmpty() || CategoryList.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Please Fill All Details");
        } else {
            try {
                Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");
                String updateQuery = "UPDATE items SET Name = ?, Category = ?, price = ? WHERE ItemID = ?";

                try (PreparedStatement Pst = Con.prepareStatement(updateQuery)) {
                    Pst.setString(1, ItemName.getText());
                    Pst.setString(2, CategoryList.getSelectedItem().toString());
                    Pst.setInt(3, Integer.parseInt(ItemPrice.getText()));
                    Pst.setInt(4, Key);

                    int row = Pst.executeUpdate();

                    if (row > 0) {
                        JOptionPane.showMessageDialog(this, "Updated Successfully");
                        ShowItems();
                        clearFields();
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to Update Item");
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid price");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
            } finally {
                if (Con != null) {
                    try {
                        Con.close();
                    } catch (SQLException ex) {
                        // Handle close exception if necessary
                    }
                }
            }
        }
    }//GEN-LAST:event_EditItemBtnActionPerformed

    private void RemoveItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveItemBtnActionPerformed
        // REMOVE AN ITEM
        if (Key == 0) {
            JOptionPane.showMessageDialog(this, "Please select an item to delete");
        } else {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this item?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    Con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/grabdb", "root", "admin");
                    String deleteQuery = "DELETE FROM items WHERE ItemID = ?";

                    try (PreparedStatement Pst = Con.prepareStatement(deleteQuery)) {
                        Pst.setInt(1, Key);

                        int row = Pst.executeUpdate();

                        if (row > 0) {
                            JOptionPane.showMessageDialog(this, "Item Deleted Successfully");
                            ShowItems();
                            clearFields();
                        } else {
                            JOptionPane.showMessageDialog(this, "Failed to Delete Item");
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
                } finally {
                    if (Con != null) {
                        try {
                            Con.close();
                        } catch (SQLException ex) {
                            // Handle close exception if necessary
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_RemoveItemBtnActionPerformed

    private void RemoveCategBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveCategBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RemoveCategBtnActionPerformed
    int Key = 0;
    private void ItemsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemsListMouseClicked
        DefaultTableModel model = (DefaultTableModel) ItemsList.getModel();
        int MyIndex = ItemsList.getSelectedRow();
        Key = Integer.parseInt(model.getValueAt(MyIndex, 0).toString());
        ItemName.setText(model.getValueAt(MyIndex, 1).toString());
        CategoryList.setSelectedItem(model.getValueAt(MyIndex, 2).toString());
        ItemPrice.setText(model.getValueAt(MyIndex, 3).toString());
    }//GEN-LAST:event_ItemsListMouseClicked

    private void FilterCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FilterCategoryItemStateChanged
        // Filter By Category
        FilterItems();
    }//GEN-LAST:event_FilterCategoryItemStateChanged

    private void AddCategBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCategBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddCategBtn1ActionPerformed

    private void AddCategBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddCategBtn1MouseClicked
        // REFRESH ITEMS TABLE
        ShowItems();
    }//GEN-LAST:event_AddCategBtn1MouseClicked

    private void LogoutBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutBtnMouseClicked
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_LogoutBtnMouseClicked

    private void OrderItemsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderItemsBtnActionPerformed
        // TODO add your handling code here:
        new OrderItems().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_OrderItemsBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Items().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCategBtn;
    private javax.swing.JButton AddCategBtn1;
    private javax.swing.JButton AddItemBtn;
    private javax.swing.JComboBox<String> CategoryList;
    private javax.swing.JTextField CategoryName;
    private javax.swing.JButton EditItemBtn;
    private javax.swing.JComboBox<String> FilterCategory;
    private javax.swing.JTextField ItemName;
    private javax.swing.JTextField ItemPrice;
    private javax.swing.JButton ItemsBtn;
    private javax.swing.JTable ItemsList;
    private javax.swing.JLabel Logo;
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JButton OrderItemsBtn;
    private javax.swing.JButton OrdersBtn;
    private javax.swing.JButton RemoveCategBtn;
    private javax.swing.JButton RemoveItemBtn;
    private javax.swing.JButton SaleBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
